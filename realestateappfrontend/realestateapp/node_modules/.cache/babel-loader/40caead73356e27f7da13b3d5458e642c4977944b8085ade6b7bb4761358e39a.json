{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\.vscode\\\\RealEstateAppBackup\\\\realestateappfrontend\\\\realestateapp\\\\src\\\\DataProvider.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport { jwtDecode } from 'jwt-decode';\n\n//Create Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DataContext = /*#__PURE__*/createContext();\n\n//Create Provider Element\nexport const DataProvider = ({\n  children\n}) => {\n  _s();\n  //userLoggedIn variable handling\n  const [userLoggedIn, setUserLoggedIn] = useState(() => {\n    return localStorage.getItem('userLoggedIn') === 'true';\n  });\n\n  // Sync userLoggedIn with JWT token in cookies\n  useEffect(() => {\n    const token = Cookies.get('token');\n    if (token) {\n      try {\n        const decoded = jwtDecode(token);\n        if (decoded && decoded.User_ID) {\n          setUserLoggedIn(true);\n          localStorage.setItem('userLoggedIn', 'true');\n          return;\n        }\n      } catch {}\n    }\n    setUserLoggedIn(false);\n    localStorage.setItem('userLoggedIn', 'false');\n  }, []);\n\n  //editProfile variable\n  const [editProfile, setEditProfile] = useState(false);\n\n  //State to store cart product IDs for use on Cart Page\n  const [cartProducts, setCartProducts] = useState([]);\n\n  //Function For Filtering Product Object Key Value Pairs\n  const getValues = (obj, keys) => {\n    return keys.map(key => obj[key]);\n  };\n\n  //Function for adding a product to the local storage 'cartProducts' variable\n  const addReservation = product => {\n    const stored = localStorage.getItem('cartProducts');\n    const existingCart = stored ? JSON.parse(stored) : [];\n    // Convert date fields to ISO strings before storing\n    const productToStore = {\n      ...product,\n      reservationStartDate: product.reservationStartDate instanceof Date ? product.reservationStartDate.toISOString() : product.reservationStartDate,\n      reservationEndDate: product.reservationEndDate instanceof Date ? product.reservationEndDate.toISOString() : product.reservationEndDate\n    };\n    existingCart.push(productToStore);\n    localStorage.setItem('cartProducts', JSON.stringify(existingCart));\n    setCartProducts(existingCart);\n    console.log(\"Cart Products: \", existingCart);\n  };\n  const removeReservation = reservationToRemove => {\n    const stored = localStorage.getItem('cartProducts');\n    const existingCart = stored ? JSON.parse(stored) : [];\n    const updatedCart = existingCart.filter(reservation => !(String(reservation.reservationStartDate) === String(reservationToRemove.reservationStartDate instanceof Date ? reservationToRemove.reservationStartDate.toISOString() : reservationToRemove.reservationStartDate) && String(reservation.reservationEndDate) === String(reservationToRemove.reservationEndDate instanceof Date ? reservationToRemove.reservationEndDate.toISOString() : reservationToRemove.reservationEndDate) && reservation.roomOption === reservationToRemove.roomOption && reservation.people === reservationToRemove.people));\n    localStorage.setItem('cartProducts', JSON.stringify(updatedCart));\n    setCartProducts(updatedCart);\n    console.log(\"Cart Products: \", updatedCart);\n  };\n\n  //set cartProducts to the local storage data for 'cartProducts' on page load\n  useEffect(() => {\n    const stored = localStorage.getItem('cartProducts');\n    const savedCart = stored ? JSON.parse(stored) : [];\n    setCartProducts(savedCart);\n  }, []);\n\n  //Delete cart function\n  const deleteCart = () => {\n    setCartProducts([]);\n    const existingCart = JSON.parse(localStorage.getItem('cartProducts') || []);\n    existingCart.splice(0, existingCart.length);\n    localStorage.setItem('cartProducts', JSON.stringify(existingCart));\n    console.log('Cart Deleted', existingCart);\n  };\n\n  //Room Price Handling\n  const roomTypeOptionsArray = ['Dormitory', 'Double Room Shared Toilet & Shower', 'Double Room Private Toilet & Bath', 'Japanese Twin Room', '4 Bed Room'];\n  const [dormitoryPrice, setDormitoryPrice] = useState(3100);\n  const [doubleSharedPrice, setDoubleSharedPrice] = useState(3200);\n  const [doublePrivatePrice, setDoublePrivatePrice] = useState(3500);\n  const [japaneseTwinPrice, setJapenseTwinPrice] = useState(4000);\n  const [fourBedPrice, setFourBedPrice] = useState(5000);\n\n  //Values to be passed to children\n  const values = {\n    userLoggedIn,\n    setUserLoggedIn,\n    editProfile,\n    setEditProfile,\n    cartProducts,\n    setCartProducts,\n    addReservation,\n    deleteCart,\n    removeReservation,\n    dormitoryPrice,\n    setDormitoryPrice,\n    doubleSharedPrice,\n    setDoubleSharedPrice,\n    doublePrivatePrice,\n    setDoublePrivatePrice,\n    japaneseTwinPrice,\n    setJapenseTwinPrice,\n    fourBedPrice,\n    setFourBedPrice\n  };\n  return /*#__PURE__*/_jsxDEV(DataContext.Provider, {\n    value: values,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 13\n  }, this);\n};\n_s(DataProvider, \"OeNQMfaxD+HlsgnfFJpZCeobaUA=\");\n_c = DataProvider;\nvar _c;\n$RefreshReg$(_c, \"DataProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Cookies","jwtDecode","jsxDEV","_jsxDEV","DataContext","DataProvider","children","_s","userLoggedIn","setUserLoggedIn","localStorage","getItem","token","get","decoded","User_ID","setItem","editProfile","setEditProfile","cartProducts","setCartProducts","getValues","obj","keys","map","key","addReservation","product","stored","existingCart","JSON","parse","productToStore","reservationStartDate","Date","toISOString","reservationEndDate","push","stringify","console","log","removeReservation","reservationToRemove","updatedCart","filter","reservation","String","roomOption","people","savedCart","deleteCart","splice","length","roomTypeOptionsArray","dormitoryPrice","setDormitoryPrice","doubleSharedPrice","setDoubleSharedPrice","doublePrivatePrice","setDoublePrivatePrice","japaneseTwinPrice","setJapenseTwinPrice","fourBedPrice","setFourBedPrice","values","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/kevin/.vscode/RealEstateAppBackup/realestateappfrontend/realestateapp/src/DataProvider.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n//Create Context\r\nexport const DataContext = createContext();\r\n\r\n\r\n//Create Provider Element\r\nexport const DataProvider = ({children}) => {\r\n\r\n    //userLoggedIn variable handling\r\n    const [ userLoggedIn, setUserLoggedIn ] = useState(() => {\r\n        return localStorage.getItem('userLoggedIn') === 'true';\r\n    });\r\n\r\n    // Sync userLoggedIn with JWT token in cookies\r\n    useEffect(() => {\r\n        const token = Cookies.get('token');\r\n        if (token) {\r\n            try {\r\n                const decoded = jwtDecode(token);\r\n                if (decoded && decoded.User_ID) {\r\n                    setUserLoggedIn(true);\r\n                    localStorage.setItem('userLoggedIn', 'true');\r\n                    return;\r\n                }\r\n            } catch {}\r\n        }\r\n        setUserLoggedIn(false);\r\n        localStorage.setItem('userLoggedIn', 'false');\r\n    }, []);\r\n\r\n\r\n    //editProfile variable\r\n    const [ editProfile, setEditProfile ] = useState(false);\r\n\r\n    //State to store cart product IDs for use on Cart Page\r\n    const [ cartProducts, setCartProducts ] = useState([]);\r\n\r\n    //Function For Filtering Product Object Key Value Pairs\r\n    const getValues = (obj, keys) => {\r\n        return keys.map(key => obj[key]);\r\n    }\r\n\r\n    //Function for adding a product to the local storage 'cartProducts' variable\r\n        const addReservation = (product) => {\r\n        const stored = localStorage.getItem('cartProducts');\r\n        const existingCart = stored ? JSON.parse(stored) : [];\r\n        // Convert date fields to ISO strings before storing\r\n        const productToStore = {\r\n            ...product,\r\n            reservationStartDate: product.reservationStartDate instanceof Date\r\n                ? product.reservationStartDate.toISOString()\r\n                : product.reservationStartDate,\r\n            reservationEndDate: product.reservationEndDate instanceof Date\r\n                ? product.reservationEndDate.toISOString()\r\n                : product.reservationEndDate,\r\n        };\r\n        existingCart.push(productToStore);\r\n        localStorage.setItem('cartProducts', JSON.stringify(existingCart));\r\n        setCartProducts(existingCart);\r\n        console.log(\"Cart Products: \", existingCart);\r\n    };\r\n    const removeReservation = (reservationToRemove) => {\r\n        const stored = localStorage.getItem('cartProducts');\r\n        const existingCart = stored ? JSON.parse(stored) : [];\r\n        const updatedCart = existingCart.filter(reservation =>\r\n            !(\r\n                String(reservation.reservationStartDate) === String(\r\n                    reservationToRemove.reservationStartDate instanceof Date\r\n                        ? reservationToRemove.reservationStartDate.toISOString()\r\n                        : reservationToRemove.reservationStartDate\r\n                ) &&\r\n                String(reservation.reservationEndDate) === String(\r\n                    reservationToRemove.reservationEndDate instanceof Date\r\n                        ? reservationToRemove.reservationEndDate.toISOString()\r\n                        : reservationToRemove.reservationEndDate\r\n                ) &&\r\n                reservation.roomOption === reservationToRemove.roomOption &&\r\n                reservation.people === reservationToRemove.people\r\n            )\r\n        );\r\n        localStorage.setItem('cartProducts', JSON.stringify(updatedCart));\r\n        setCartProducts(updatedCart);\r\n        console.log(\"Cart Products: \", updatedCart);\r\n    };\r\n\r\n\r\n    //set cartProducts to the local storage data for 'cartProducts' on page load\r\n    useEffect(() => {\r\n        const stored = localStorage.getItem('cartProducts');\r\n        const savedCart = stored ? JSON.parse(stored) : [];\r\n        setCartProducts(savedCart);\r\n\r\n    }, []);\r\n\r\n    //Delete cart function\r\n    const deleteCart = () => {\r\n        setCartProducts([]);\r\n        const existingCart = JSON.parse(localStorage.getItem('cartProducts') || []);\r\n        existingCart.splice(0, existingCart.length)\r\n        localStorage.setItem('cartProducts', JSON.stringify(existingCart));\r\n        console.log('Cart Deleted', existingCart);\r\n\r\n\r\n    }\r\n\r\n    //Room Price Handling\r\n    const roomTypeOptionsArray = ['Dormitory', 'Double Room Shared Toilet & Shower', 'Double Room Private Toilet & Bath', 'Japanese Twin Room', '4 Bed Room']\r\n    const [ dormitoryPrice, setDormitoryPrice ] = useState(3100);\r\n    const [ doubleSharedPrice, setDoubleSharedPrice ] = useState(3200);\r\n    const [ doublePrivatePrice, setDoublePrivatePrice ] = useState(3500);\r\n    const [ japaneseTwinPrice, setJapenseTwinPrice ] = useState(4000);\r\n    const [ fourBedPrice, setFourBedPrice ] = useState(5000);\r\n\r\n\r\n    //Values to be passed to children\r\n    const values = {userLoggedIn, setUserLoggedIn, editProfile, setEditProfile, cartProducts, setCartProducts, addReservation, deleteCart, removeReservation, dormitoryPrice, setDormitoryPrice, doubleSharedPrice, setDoubleSharedPrice, doublePrivatePrice, setDoublePrivatePrice, japaneseTwinPrice, setJapenseTwinPrice, fourBedPrice, setFourBedPrice }\r\n\r\n\r\n    return (<DataContext.Provider value ={values}>{/*Pass States to Children*/}\r\n                {children}\r\n            </DataContext.Provider>\r\n    );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}